import * as yaml from 'js-yaml'
import fs from 'fs'

import { useEtherscan } from '@/lib/hooks/useEtherscan'
import { AddressLike } from '@/lib/types'

const config = yaml.load(fs.readFileSync('env.yaml', 'utf-8')) as {
	[key: string]: {
		[protocol: string]: AddressLike
	}
}

const generateStaticReferences: (props: {
	key: string
	name: string
	abi: string
}) => void = ({ key, name, abi }) => {
	const protocolGeneration = `
    // Autogenerated file for @${key}. Do not edit.
    export const ${name.replace(' ', '_').toUpperCase()}_NAME = '${name}'
    export const ${name.replace(' ', '_').toUpperCase()}_ABI = ${abi}`

	if (!fs.existsSync(`./references/${key}`)) {
		fs.mkdirSync(`./references/${key}`)
	}

	fs.writeFileSync(`./references/${key}/index.ts`, protocolGeneration)
}

const generateDynamicReferences: (props: {
	name: string
	source: string
}) => Promise<void> = async ({ name, source }) => {
	// Remove the double curly braces from the source code.
	// @note I am not sure why this is happening, but it is solved now.
	source = source.replace('{{', '{')
	source = source.replace('}}', '}')

	const contractSources = JSON.parse(source).sources as {
		[key: string]: { content: string }
	}

	Object.entries(contractSources).forEach(([sourceKey, value]) => {
		const directory = `./references/${name}/${sourceKey
			.replace('./', '')
			.split('/')
			.slice(0, -1)
			.join('/')}`

		const filename = sourceKey.replace('./', '').split('/').slice(-1)[0]

		fs.mkdirSync(directory, {
			recursive: true
		})

		// Write the file to the folder.
		fs.writeFileSync(`${directory}/${filename}`, value.content)
	})
}

const references = {} as {
	[key: string]: {
		abi: string
		name: string
		source: string
	}
}

Object.entries(config.protocols).forEach(async ([key, value]) => {
	const { abi, name, source } = await useEtherscan({ address: value })

	generateStaticReferences({ key, name, abi })
	generateDynamicReferences({ name, source })

	references[key] = {
		name,
		abi,
		source
	}
})

export default references
